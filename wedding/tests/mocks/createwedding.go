// Code generated by MockGen. DO NOT EDIT.
// Source: internal/events/nats.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/KeeseyLtd/microfun/wedding/internal/domain"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockgetInvitationQueryer is a mock of getInvitationQueryer interface.
type MockgetInvitationQueryer struct {
	ctrl     *gomock.Controller
	recorder *MockgetInvitationQueryerMockRecorder
}

// MockgetInvitationQueryerMockRecorder is the mock recorder for MockgetInvitationQueryer.
type MockgetInvitationQueryerMockRecorder struct {
	mock *MockgetInvitationQueryer
}

// NewMockgetInvitationQueryer creates a new mock instance.
func NewMockgetInvitationQueryer(ctrl *gomock.Controller) *MockgetInvitationQueryer {
	mock := &MockgetInvitationQueryer{ctrl: ctrl}
	mock.recorder = &MockgetInvitationQueryerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgetInvitationQueryer) EXPECT() *MockgetInvitationQueryerMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockgetInvitationQueryer) Handle(ctx context.Context, args domain.GetInvitation) (domain.Invitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx, args)
	ret0, _ := ret[0].(domain.Invitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handle indicates an expected call of Handle.
func (mr *MockgetInvitationQueryerMockRecorder) Handle(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockgetInvitationQueryer)(nil).Handle), ctx, args)
}

// MockcreateWeddingCommand is a mock of createWeddingCommand interface.
type MockcreateWeddingCommand struct {
	ctrl     *gomock.Controller
	recorder *MockcreateWeddingCommandMockRecorder
}

// MockcreateWeddingCommandMockRecorder is the mock recorder for MockcreateWeddingCommand.
type MockcreateWeddingCommandMockRecorder struct {
	mock *MockcreateWeddingCommand
}

// NewMockcreateWeddingCommand creates a new mock instance.
func NewMockcreateWeddingCommand(ctrl *gomock.Controller) *MockcreateWeddingCommand {
	mock := &MockcreateWeddingCommand{ctrl: ctrl}
	mock.recorder = &MockcreateWeddingCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcreateWeddingCommand) EXPECT() *MockcreateWeddingCommandMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockcreateWeddingCommand) Handle(ctx context.Context, args domain.CreateWeddingParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockcreateWeddingCommandMockRecorder) Handle(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockcreateWeddingCommand)(nil).Handle), ctx, args)
}

// MockgetWeddingQueryer is a mock of getWeddingQueryer interface.
type MockgetWeddingQueryer struct {
	ctrl     *gomock.Controller
	recorder *MockgetWeddingQueryerMockRecorder
}

// MockgetWeddingQueryerMockRecorder is the mock recorder for MockgetWeddingQueryer.
type MockgetWeddingQueryerMockRecorder struct {
	mock *MockgetWeddingQueryer
}

// NewMockgetWeddingQueryer creates a new mock instance.
func NewMockgetWeddingQueryer(ctrl *gomock.Controller) *MockgetWeddingQueryer {
	mock := &MockgetWeddingQueryer{ctrl: ctrl}
	mock.recorder = &MockgetWeddingQueryerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgetWeddingQueryer) EXPECT() *MockgetWeddingQueryerMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockgetWeddingQueryer) Handle(ctx context.Context, weddingID uuid.UUID) (domain.Wedding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx, weddingID)
	ret0, _ := ret[0].(domain.Wedding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handle indicates an expected call of Handle.
func (mr *MockgetWeddingQueryerMockRecorder) Handle(ctx, weddingID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockgetWeddingQueryer)(nil).Handle), ctx, weddingID)
}
