// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: invitations.sql

package postgres

import (
	"context"

	"github.com/google/uuid"
)

const createInvitation = `-- name: CreateInvitation :one
INSERT INTO invitations (
    id, invitees, wedding_id
) VALUES (
    $1, $2, $3
) RETURNING id, invitees, status, created_at, wedding_id
`

type CreateInvitationParams struct {
	ID        uuid.UUID
	Invitees  string
	WeddingID uuid.UUID
}

func (q *Queries) CreateInvitation(ctx context.Context, arg CreateInvitationParams) (Invitation, error) {
	row := q.db.QueryRowContext(ctx, createInvitation, arg.ID, arg.Invitees, arg.WeddingID)
	var i Invitation
	err := row.Scan(
		&i.ID,
		&i.Invitees,
		&i.Status,
		&i.CreatedAt,
		&i.WeddingID,
	)
	return i, err
}

const deleteInvitation = `-- name: DeleteInvitation :exec
DELETE FROM invitations WHERE id = $1
`

func (q *Queries) DeleteInvitation(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteInvitation, id)
	return err
}

const getInvitation = `-- name: GetInvitation :one
SELECT id, invitees, status, created_at, wedding_id FROM invitations
WHERE wedding_id = $1 AND id = $2 LIMIT 1
`

type GetInvitationParams struct {
	WeddingID uuid.UUID
	ID        uuid.UUID
}

func (q *Queries) GetInvitation(ctx context.Context, arg GetInvitationParams) (Invitation, error) {
	row := q.db.QueryRowContext(ctx, getInvitation, arg.WeddingID, arg.ID)
	var i Invitation
	err := row.Scan(
		&i.ID,
		&i.Invitees,
		&i.Status,
		&i.CreatedAt,
		&i.WeddingID,
	)
	return i, err
}

const getInvitations = `-- name: GetInvitations :many
SELECT id, invitees, status, created_at, wedding_id FROM invitations
WHERE wedding_id = $1
`

func (q *Queries) GetInvitations(ctx context.Context, weddingID uuid.UUID) ([]Invitation, error) {
	rows, err := q.db.QueryContext(ctx, getInvitations, weddingID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Invitation
	for rows.Next() {
		var i Invitation
		if err := rows.Scan(
			&i.ID,
			&i.Invitees,
			&i.Status,
			&i.CreatedAt,
			&i.WeddingID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInvitation = `-- name: UpdateInvitation :exec
UPDATE invitations
SET
	status = CASE WHEN $1::boolean
		THEN $2::int ELSE status END,
	invitees = CASE WHEN $3::boolean
		THEN $4::varchar ELSE invitees END
WHERE
	id = $5
`

type UpdateInvitationParams struct {
	StatusDoUpdate   bool
	Status           int32
	InviteesDoUpdate bool
	Invitees         string
	ID               uuid.UUID
}

func (q *Queries) UpdateInvitation(ctx context.Context, arg UpdateInvitationParams) error {
	_, err := q.db.ExecContext(ctx, updateInvitation,
		arg.StatusDoUpdate,
		arg.Status,
		arg.InviteesDoUpdate,
		arg.Invitees,
		arg.ID,
	)
	return err
}
