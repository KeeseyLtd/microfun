// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: weddings.sql

package postgres

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createWedding = `-- name: CreateWedding :one
INSERT INTO weddings (
    id, names, wedding_date, user_id
) VALUES (
    $1, $2, $3, $4
)
RETURNING status, created_at, updated_at
`

type CreateWeddingParams struct {
	ID          uuid.UUID
	Names       string
	WeddingDate time.Time
	UserID      uuid.UUID
}

type CreateWeddingRow struct {
	Status    int64
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

func (q *Queries) CreateWedding(ctx context.Context, arg CreateWeddingParams) (CreateWeddingRow, error) {
	row := q.db.QueryRowContext(ctx, createWedding,
		arg.ID,
		arg.Names,
		arg.WeddingDate,
		arg.UserID,
	)
	var i CreateWeddingRow
	err := row.Scan(&i.Status, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const getWedding = `-- name: GetWedding :one
SELECT id, names, status, user_id, created_at, updated_at, wedding_date from weddings
WHERE id = $1
`

func (q *Queries) GetWedding(ctx context.Context, id uuid.UUID) (Wedding, error) {
	row := q.db.QueryRowContext(ctx, getWedding, id)
	var i Wedding
	err := row.Scan(
		&i.ID,
		&i.Names,
		&i.Status,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.WeddingDate,
	)
	return i, err
}
